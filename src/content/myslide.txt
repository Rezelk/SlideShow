// メタ設定
META: background=black
META: color=white
META: title=My Slide Show

// スライド
================================================================================
# HTML5＋CSS3でスライドツール作ってみた

## Created by Rezelk

// スライド
================================================================================
# HTML5とは？

## より便利なWebの実現へ向けた次世代Web規格

- よりシンプルに、より高度な処理を、より使いやすく、より多くの人へ

## 見直されているポイント

- タグの整理（スタイルはCSS、タグは文書の意味づけとして整理）
- APIの強化（位置情報の取得、File APIなどなど）

ローカルファイルの扱いが強化され、オフラインWebアプリなんかも実現できる。
また、位置情報の取得などスマホ/タブなどモバイル視点の機能強化も。

## 周辺技術、関連技術の変化

- CSSでできることの強化（CSS3：グラデーション、アニメーションまわりの強化）
- WebSocketなど新しい通信技術の強化（サーバーPush型のWebアプリなど）

CSS3はWebを触ったことがある人からすると感動モノ。
WebSocketは従来のWebとは違うものの作りができるようになるので期待。

// スライド
================================================================================
# プレゼンツールを作るにあたって

## コンセプト（あくまでコンセプト！）

- テキストエディタでプレゼンが作れる（vi でもできるぜ！）

アウトライン→デザイン適用が速攻！ラクチン！
→Markdown記法とPukiWiki記法を参考にできるだけシンプルに（見た目はCSSでがんばる）

- 使ってて楽しいインターフェース（気持ちのいいUXの実現）

AndroidやiPhoneでの操作を考えるとFlashはナンセンス。
タップ（クリック）だけで基本操作はできないとダメだと思う。
（ただキーボード操作による快適性の向上は個人的にほしい機能）

## 使い方

- スライドファイル（myslide.txt）を編集する
- HTMLを開いてプレゼンする

これだけ！

// スライド
================================================================================
# 仕組み

## 基本機能

HTMLを開く&color(pink){・・・HTMLは文章の構造（とボタンの配置）を示すのみ};
　↓
ops.xmlを読込&color(pink){・・・動作設定};
　↓
myslide.txt（*任意：ops.xmlで定義*）を読込&color(pink){・・・実際のプレゼンコンテンツ};
　↓
テキストを解析しHTML化&color(pink){・・・正規表現で文字列パターンを解析するだけ};
　↓
スライドショー開始

## うさぎとかめ

**&color(pink){うさぎ};** は 現在ページ/総ページ で四角の幅やうさぎの位置を変えるだけ。
**&color(greenyellow){かめ};** は CSS3のトランザクション（アニメーション）を使えば1分で実装できる。
（むしろコントロールバーの残時間表示をする方が実装に時間がかかる・・・）

// スライド
================================================================================
META: background=#113
META: color=#eef

# 使える文法（背景色、文字色）

>META: background=#113
>META: color=#eef

# スライド単位に色を指定することが出来ます

背景の場合は色だけでなく、背景画像やグラデーションも指定することが出来ます。
cf) CSS - background属性 - <a href="http://www.htmq.com/style/background.shtml" target="_blank">http://www.htmq.com/style/background.shtml</a>

// スライド
================================================================================
# 使える文法（見出し）

># 見出し１
>## 見出し２
>### 見出し３
>#### 見出し４
>##### 見出し５
>###### 見出し６

# 見出し１
## 見出し２
### 見出し３
#### 見出し４
##### 見出し５
###### 見出し６

// スライド
================================================================================
# 使える文法（リスト）

>- リスト項目Ａ
>- リスト項目Ｂ
>- リスト項目Ｃ

- リスト項目Ａ
- リスト項目Ｂ
- リスト項目Ｃ


>1. リスト項目１
>2. リスト項目２
>3. リスト項目３

1. リスト項目１
2. リスト項目２
3. リスト項目３

// スライド
================================================================================
# 使える文法（テーブル）

>|項目１|値１|備考１|
>|項目２|値２|備考２|
>|項目３|値３|備考３|

|項目１|値１|備考１|
|項目２|値２|備考２|
|項目３|値３|備考３|

// スライド
================================================================================
# 使える文法（引用）

>>この文章は引用になります
>>この文章は引用になります
>>この文章は引用になります

>この文章は引用になります
>この文章は引用になります
>この文章は引用になります

// スライド
================================================================================
# 使える文法（HTMLタグ）

HTMLタグはエスケープしない方針。

> &lt;b>タグを直接記入&lt;/b>

<b>タグを直接記入</b>


逆にタグを表示したい場合は、HTML的に書くこと。

> &lt; = &amp;lt;
> &gt; = &amp;gt;
> &amp; = &amp;amp;

// スライド
================================================================================
# 使える文法（区切り線）

>----------


----------

// スライド
================================================================================
# 使える文法（インライン要素）

インライン要素はブロック要素内でも指定できます。
ただし、引用(>)に限ってインライン要素が無視されます。

>インライン要素：通常文字列
>インライン要素：*強調文字列（斜体）*
>インライン要素：**強い強調文字列（太字）**
>インライン要素：__上線文字列__
>インライン要素：--取消文字列--
>インライン要素：_下線文字列_
>インライン要素：&color(red){文字色変更};
>インライン要素：&color(black,lime){文字背景色変更};
>インライン要素：&color(,lime){背景色変更};
>インライン要素：&size(0.5em){文字サイズ変更};

インライン要素：通常文字列
インライン要素：*強調文字列（斜体）*
インライン要素：**強い強調文字列（太字）**
インライン要素：__上線文字列__
インライン要素：--取消文字列--
インライン要素：_下線文字列_
インライン要素：&color(red){文字色変更};
インライン要素：&color(black,lime){文字背景色変更};
インライン要素：&color(,lime){背景色変更};
インライン要素：&size(0.5em){文字サイズ変更};

// スライド
================================================================================
# 使える文法（タブ文字）

ちょっとだけ見やすくなるように置換してます。
タブ置換はテーブル(|item|item|)以外のすべての要素に対して置換されます。

## タブ文字の表示例
>/* Hello World by Java */
>public static void main(String[] args) {
>	if (args.length >= 1) {
>		System.out.println("hello " + args[0]);
>	} else {
>		System.out.println("hello world!");
>	}
>}

// スライド
================================================================================
# 使える文法（コード）

プログラム（コード）が見やすくなります。

- 「コードハイライトあるといいね」と君が言ったから
- ７月１６日はハイライト記念日

## コード（シンタックスハイライト）

>#code(){{
>～～表示したいコード～～
>}}

#code(){{
public class HogeImpl implements Hoge {
	private String name = "";
	private int year = 0;
	public HogeImpl() {
		this.name = "Moge";
		this.year = 2013;
	}
}
}}

